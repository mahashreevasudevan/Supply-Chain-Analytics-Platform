CREATE DATABASE IF NOT EXISTS SUPPLY;
CREATE SCHEMA IF NOT EXISTS SUPPLY.ANALYTICS;
USE DATABASE SUPPLY;
USE SCHEMA ANALYTICS;

-- Creating Supply Chain Data Table
CREATE OR REPLACE TABLE SUPPLY_CHAIN_DATA (
    PAYMENT_TYPE VARCHAR(50),
    DAYS_FOR_SHIPPING_REAL INT,
    DAYS_FOR_SHIPMENT_SCHEDULED INT,
    BENEFIT_PER_ORDER DECIMAL(12,2),
    SALES_PER_CUSTOMER DECIMAL(12,4),
    DELIVERY_STATUS VARCHAR(50),
    LATE_DELIVERY_RISK INT,
    CATEGORY_ID INT,
    CATEGORY_NAME VARCHAR(100),
    CUSTOMER_CITY VARCHAR(100),
    CUSTOMER_COUNTRY VARCHAR(100),
    CUSTOMER_FNAME VARCHAR(100),
    CUSTOMER_ID INT,
    CUSTOMER_LNAME VARCHAR(100),
    CUSTOMER_SEGMENT VARCHAR(50),
    CUSTOMER_STATE VARCHAR(10),
    CUSTOMER_STREET VARCHAR(255),
    CUSTOMER_ZIPCODE VARCHAR(20),
    DEPARTMENT_ID INT,
    DEPARTMENT_NAME VARCHAR(100),
    LATITUDE DECIMAL(10,8),
    LONGITUDE DECIMAL(11,8),
    MARKET VARCHAR(50),
    ORDER_CITY VARCHAR(100),
    ORDER_COUNTRY VARCHAR(100),
    ORDER_CUSTOMER_ID INT,
    ORDER_DATE TIMESTAMP,
    ORDER_ID INT,
    ORDER_ITEM_CARDPROD_ID INT,
    ORDER_ITEM_DISCOUNT DECIMAL(12,2),
    ORDER_ITEM_DISCOUNT_RATE DECIMAL(5,3),
    ORDER_ITEM_ID INT,
    ORDER_ITEM_PRODUCT_PRICE DECIMAL(12,2),
    ORDER_ITEM_PROFIT_RATIO DECIMAL(8,6),
    ORDER_ITEM_QUANTITY INT,
    SALES DECIMAL(12,2),
    ORDER_ITEM_TOTAL DECIMAL(12,2),
    ORDER_PROFIT_PER_ORDER DECIMAL(12,2),
    ORDER_REGION VARCHAR(100),
    ORDER_STATE VARCHAR(100),
    ORDER_STATUS VARCHAR(50),
    PRODUCT_CARD_ID INT,
    PRODUCT_CATEGORY_ID INT,
    PRODUCT_IMAGE VARCHAR(500),
    PRODUCT_NAME VARCHAR(255),
    PRODUCT_PRICE DECIMAL(12,2),
    PRODUCT_STATUS INT,
    SHIPPING_DATE TIMESTAMP,
    SHIPPING_MODE VARCHAR(50)
);

-- Creating Access Logs Data Table
CREATE OR REPLACE TABLE ACCESS_LOGS_DATA (
    PRODUCT VARCHAR(255),
    CATEGORY VARCHAR(100),
    ACCESS_DATE TIMESTAMP,
    ACCESS_MONTH VARCHAR(10),
    ACCESS_HOUR INT,
    DEPARTMENT VARCHAR(100),
    IP_ADDRESS VARCHAR(50),
    URL VARCHAR(1000)
);

-- Creating staging tables for raw data import with string data type columns
CREATE OR REPLACE TABLE SUPPLY_CHAIN_DATA_STAGING (
    PAYMENT_TYPE VARCHAR(50),
    DAYS_FOR_SHIPPING_REAL INT,
    DAYS_FOR_SHIPMENT_SCHEDULED INT,
    BENEFIT_PER_ORDER DECIMAL(12,2),
    SALES_PER_CUSTOMER DECIMAL(12,4),
    DELIVERY_STATUS VARCHAR(50),
    LATE_DELIVERY_RISK INT,
    CATEGORY_ID INT,
    CATEGORY_NAME VARCHAR(100),
    CUSTOMER_CITY VARCHAR(100),
    CUSTOMER_COUNTRY VARCHAR(100),
    CUSTOMER_FNAME VARCHAR(100),
    CUSTOMER_ID INT,
    CUSTOMER_LNAME VARCHAR(100),
    CUSTOMER_SEGMENT VARCHAR(50),
    CUSTOMER_STATE VARCHAR(10),
    CUSTOMER_STREET VARCHAR(255),
    CUSTOMER_ZIPCODE VARCHAR(20),
    DEPARTMENT_ID INT,
    DEPARTMENT_NAME VARCHAR(100),
    LATITUDE DECIMAL(10,8),
    LONGITUDE DECIMAL(11,8),
    MARKET VARCHAR(50),
    ORDER_CITY VARCHAR(100),
    ORDER_COUNTRY VARCHAR(100),
    ORDER_CUSTOMER_ID INT,
    ORDER_DATE_RAW VARCHAR(100),
    ORDER_ID INT,
    ORDER_ITEM_CARDPROD_ID INT,
    ORDER_ITEM_DISCOUNT DECIMAL(12,2),
    ORDER_ITEM_DISCOUNT_RATE DECIMAL(5,3),
    ORDER_ITEM_ID INT,
    ORDER_ITEM_PRODUCT_PRICE DECIMAL(12,2),
    ORDER_ITEM_PROFIT_RATIO DECIMAL(8,6),
    ORDER_ITEM_QUANTITY INT,
    SALES DECIMAL(12,2),
    ORDER_ITEM_TOTAL DECIMAL(12,2),
    ORDER_PROFIT_PER_ORDER DECIMAL(12,2),
    ORDER_REGION VARCHAR(100),
    ORDER_STATE VARCHAR(100),
    ORDER_STATUS VARCHAR(50),
    PRODUCT_CARD_ID INT,
    PRODUCT_CATEGORY_ID INT,
    PRODUCT_IMAGE VARCHAR(500),
    PRODUCT_NAME VARCHAR(255),
    PRODUCT_PRICE DECIMAL(12,2),
    PRODUCT_STATUS INT,
    SHIPPING_DATE_RAW VARCHAR(100),
    SHIPPING_MODE VARCHAR(50)
);

CREATE OR REPLACE TABLE ACCESS_LOGS_DATA_STAGING (
    PRODUCT VARCHAR(255),
    CATEGORY VARCHAR(100),
    ACCESS_DATE_RAW VARCHAR(100),
    ACCESS_MONTH VARCHAR(10),
    ACCESS_HOUR INT,
    DEPARTMENT VARCHAR(100),
    IP_ADDRESS VARCHAR(50),
    URL VARCHAR(1000)
);

-- Importing input file
CREATE OR REPLACE FILE FORMAT CSV_FORMAT_SUPPLY_CHAIN
TYPE = 'CSV'
FIELD_DELIMITER = ','
SKIP_HEADER = 1
FIELD_OPTIONALLY_ENCLOSED_BY = '"'
NULL_IF = ('NULL', 'null', '', 'XXXXXXXXX')
EMPTY_FIELD_AS_NULL = TRUE
ERROR_ON_COLUMN_COUNT_MISMATCH = FALSE;

CREATE OR REPLACE FILE FORMAT CSV_FORMAT_ACCESS_LOGS
TYPE = 'CSV'
FIELD_DELIMITER = ','
SKIP_HEADER = 1
FIELD_OPTIONALLY_ENCLOSED_BY = '"'
NULL_IF = ('NULL', 'null', '')
EMPTY_FIELD_AS_NULL = TRUE
ERROR_ON_COLUMN_COUNT_MISMATCH = FALSE;

-- Creating stages for input file upload
CREATE OR REPLACE STAGE SUPPLY_CHAIN_STAGE
FILE_FORMAT = CSV_FORMAT_SUPPLY_CHAIN;

CREATE OR REPLACE STAGE ACCESS_LOGS_STAGE
FILE_FORMAT = CSV_FORMAT_ACCESS_LOGS;

-- ETL for Supply Chain Data
CREATE OR REPLACE PROCEDURE LOAD_SUPPLY_CHAIN_DATA()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
    -- Clearing Staging table
    TRUNCATE TABLE SUPPLY_CHAIN_DATA_STAGING;

    -- Loading data into staging
    COPY INTO SUPPLY_CHAIN_DATA_STAGING
    FROM @SUPPLY_CHAIN_STAGE
    FILE_FORMAT = CSV_FORMAT_SUPPLY_CHAIN
    ON_ERROR = 'CONTINUE';

    -- Clearing the main table first
    TRUNCATE TABLE SUPPLY_CHAIN_DATA;

    -- Inserting transformed data into main table with correct datetime format
    INSERT INTO SUPPLY_CHAIN_DATA (
        PAYMENT_TYPE, DAYS_FOR_SHIPPING_REAL, DAYS_FOR_SHIPMENT_SCHEDULED,
        BENEFIT_PER_ORDER, SALES_PER_CUSTOMER, DELIVERY_STATUS,
        LATE_DELIVERY_RISK, CATEGORY_ID, CATEGORY_NAME, CUSTOMER_CITY,
        CUSTOMER_COUNTRY, CUSTOMER_FNAME, CUSTOMER_ID,
        CUSTOMER_LNAME, CUSTOMER_SEGMENT, CUSTOMER_STATE,
        CUSTOMER_STREET, CUSTOMER_ZIPCODE, DEPARTMENT_ID, DEPARTMENT_NAME,
        LATITUDE, LONGITUDE, MARKET, ORDER_CITY, ORDER_COUNTRY,
        ORDER_CUSTOMER_ID, ORDER_DATE, ORDER_ID, ORDER_ITEM_CARDPROD_ID,
        ORDER_ITEM_DISCOUNT, ORDER_ITEM_DISCOUNT_RATE, ORDER_ITEM_ID,
        ORDER_ITEM_PRODUCT_PRICE, ORDER_ITEM_PROFIT_RATIO, ORDER_ITEM_QUANTITY,
        SALES, ORDER_ITEM_TOTAL, ORDER_PROFIT_PER_ORDER, ORDER_REGION,
        ORDER_STATE, ORDER_STATUS, PRODUCT_CARD_ID,
        PRODUCT_CATEGORY_ID, PRODUCT_IMAGE,
        PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STATUS, SHIPPING_DATE, SHIPPING_MODE
    )
    SELECT 
        PAYMENT_TYPE, DAYS_FOR_SHIPPING_REAL, DAYS_FOR_SHIPMENT_SCHEDULED,
        BENEFIT_PER_ORDER, SALES_PER_CUSTOMER, DELIVERY_STATUS,
        LATE_DELIVERY_RISK, CATEGORY_ID, CATEGORY_NAME, CUSTOMER_CITY,
        CUSTOMER_COUNTRY, CUSTOMER_FNAME, CUSTOMER_ID,
        CUSTOMER_LNAME, CUSTOMER_SEGMENT, CUSTOMER_STATE,
        CUSTOMER_STREET, CUSTOMER_ZIPCODE, DEPARTMENT_ID, DEPARTMENT_NAME,
        LATITUDE, LONGITUDE, MARKET, ORDER_CITY, ORDER_COUNTRY,
        ORDER_CUSTOMER_ID,
        
        TRY_TO_TIMESTAMP_NTZ(TRIM(ORDER_DATE_RAW), 'DD-MM-YYYY HH24:MI') AS ORDER_DATE,
        ORDER_ID, ORDER_ITEM_CARDPROD_ID, ORDER_ITEM_DISCOUNT,
        ORDER_ITEM_DISCOUNT_RATE, ORDER_ITEM_ID, ORDER_ITEM_PRODUCT_PRICE,
        ORDER_ITEM_PROFIT_RATIO, ORDER_ITEM_QUANTITY, SALES, ORDER_ITEM_TOTAL,
        ORDER_PROFIT_PER_ORDER, ORDER_REGION, ORDER_STATE, ORDER_STATUS,
        PRODUCT_CARD_ID, PRODUCT_CATEGORY_ID, PRODUCT_IMAGE,
        PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STATUS,
        
        TRY_TO_TIMESTAMP_NTZ(TRIM(SHIPPING_DATE_RAW), 'DD-MM-YYYY HH24:MI') AS SHIPPING_DATE,
        SHIPPING_MODE
    FROM SUPPLY_CHAIN_DATA_STAGING
    WHERE ORDER_DATE_RAW IS NOT NULL 
      AND TRIM(ORDER_DATE_RAW) != ''
      AND TRIM(ORDER_DATE_RAW) != '########';

    RETURN 'Supply chain data loaded successfully';
END;
$$;

-- ETL for Access Logs Data
CREATE OR REPLACE PROCEDURE LOAD_ACCESS_LOGS_DATA()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
    -- Clearing staging table
    TRUNCATE TABLE ACCESS_LOGS_DATA_STAGING;

    -- Loading data into staging
    COPY INTO ACCESS_LOGS_DATA_STAGING
    FROM @ACCESS_LOGS_STAGE
    FILE_FORMAT = CSV_FORMAT_ACCESS_LOGS
    ON_ERROR = 'CONTINUE';

    -- Clearing the main table first
    TRUNCATE TABLE ACCESS_LOGS_DATA;

    -- Inserting transformed data into main table with correct datetime format
    INSERT INTO ACCESS_LOGS_DATA (
        PRODUCT, CATEGORY, ACCESS_DATE, ACCESS_MONTH,
        ACCESS_HOUR, DEPARTMENT, IP_ADDRESS, URL
    )
    SELECT 
        PRODUCT,
        CATEGORY,
        -- FIXED: Correct date format for Access Logs data (YYYY-MM-DD HH24:MI:SS format)
        TRY_TO_TIMESTAMP_NTZ(TRIM(ACCESS_DATE_RAW), 'YYYY-MM-DD HH24:MI:SS') AS ACCESS_DATE,
        ACCESS_MONTH,
        ACCESS_HOUR,
        DEPARTMENT,
        IP_ADDRESS,
        URL
    FROM ACCESS_LOGS_DATA_STAGING
    WHERE ACCESS_DATE_RAW IS NOT NULL 
      AND TRIM(ACCESS_DATE_RAW) != ''
      AND TRIM(ACCESS_DATE_RAW) != '########';

    RETURN 'Access logs data loaded successfully';
END;
$$;


CALL LOAD_SUPPLY_CHAIN_DATA();
CALL LOAD_ACCESS_LOGS_DATA();

-- Creating analytical views
CREATE OR REPLACE VIEW CUSTOMER_SUMMARY AS
SELECT 
    CUSTOMER_ID,
    CUSTOMER_FNAME || ' ' || CUSTOMER_LNAME AS FULL_NAME,
    CUSTOMER_SEGMENT,
    CUSTOMER_CITY,
    CUSTOMER_COUNTRY,
    COUNT(DISTINCT ORDER_ID) AS TOTAL_ORDERS,
    SUM(SALES) AS TOTAL_SALES,
    AVG(SALES) AS AVG_ORDER_VALUE,
    MAX(ORDER_DATE) AS LAST_ORDER_DATE,
    AVG(DAYS_FOR_SHIPPING_REAL) AS AVG_SHIPPING_DAYS,
    SUM(CASE WHEN LATE_DELIVERY_RISK = 1 THEN 1 ELSE 0 END) AS LATE_DELIVERIES
FROM SUPPLY_CHAIN_DATA
WHERE ORDER_DATE IS NOT NULL
GROUP BY CUSTOMER_ID, CUSTOMER_FNAME, CUSTOMER_LNAME, CUSTOMER_SEGMENT, CUSTOMER_CITY, CUSTOMER_COUNTRY;

CREATE OR REPLACE VIEW PRODUCT_PERFORMANCE AS
SELECT 
    PRODUCT_CARD_ID,
    PRODUCT_NAME,
    CATEGORY_NAME,
    DEPARTMENT_NAME,
    COUNT(DISTINCT ORDER_ID) AS TOTAL_ORDERS,
    SUM(ORDER_ITEM_QUANTITY) AS TOTAL_QUANTITY_SOLD,
    SUM(SALES) AS TOTAL_REVENUE,
    AVG(PRODUCT_PRICE) AS AVG_PRICE,
    AVG(ORDER_ITEM_PROFIT_RATIO) AS AVG_PROFIT_MARGIN,
    COUNT(DISTINCT CUSTOMER_ID) AS UNIQUE_CUSTOMERS
FROM SUPPLY_CHAIN_DATA
WHERE ORDER_DATE IS NOT NULL
GROUP BY PRODUCT_CARD_ID, PRODUCT_NAME, CATEGORY_NAME, DEPARTMENT_NAME;

CREATE OR REPLACE VIEW SHIPPING_PERFORMANCE AS
SELECT 
    SHIPPING_MODE,
    COUNT(*) AS TOTAL_SHIPMENTS,
    AVG(DAYS_FOR_SHIPPING_REAL) AS AVG_ACTUAL_DAYS,
    AVG(DAYS_FOR_SHIPMENT_SCHEDULED) AS AVG_SCHEDULED_DAYS,
    AVG(DAYS_FOR_SHIPPING_REAL - DAYS_FOR_SHIPMENT_SCHEDULED) AS AVG_DELAY_DAYS,
    SUM(CASE WHEN LATE_DELIVERY_RISK = 1 THEN 1 ELSE 0 END) AS LATE_DELIVERIES,
    ROUND(SUM(CASE WHEN LATE_DELIVERY_RISK = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS LATE_DELIVERY_RATE,
    SUM(SALES) AS TOTAL_REVENUE
FROM SUPPLY_CHAIN_DATA
WHERE ORDER_DATE IS NOT NULL
GROUP BY SHIPPING_MODE;

CREATE OR REPLACE VIEW GEOGRAPHIC_ANALYSIS AS
SELECT 
    CUSTOMER_COUNTRY,
    CUSTOMER_STATE,
    CUSTOMER_CITY,
    COUNT(DISTINCT CUSTOMER_ID) AS UNIQUE_CUSTOMERS,
    COUNT(DISTINCT ORDER_ID) AS TOTAL_ORDERS,
    SUM(SALES) AS TOTAL_REVENUE,
    AVG(SALES) AS AVG_ORDER_VALUE,
    AVG(DAYS_FOR_SHIPPING_REAL) AS AVG_SHIPPING_DAYS,
    SUM(CASE WHEN LATE_DELIVERY_RISK = 1 THEN 1 ELSE 0 END) AS LATE_DELIVERIES
FROM SUPPLY_CHAIN_DATA
WHERE ORDER_DATE IS NOT NULL
GROUP BY CUSTOMER_COUNTRY, CUSTOMER_STATE, CUSTOMER_CITY;

-- Creating views for web traffic analysis
CREATE OR REPLACE VIEW WEB_TRAFFIC_ANALYSIS AS
SELECT 
    DEPARTMENT,
    CATEGORY,
    DATE_TRUNC('day', ACCESS_DATE) AS ACCESS_DAY,
    ACCESS_HOUR,
    COUNT(*) AS PAGE_VIEWS,
    COUNT(DISTINCT IP_ADDRESS) AS UNIQUE_VISITORS,
    COUNT(DISTINCT PRODUCT) AS UNIQUE_PRODUCTS_VIEWED
FROM ACCESS_LOGS_DATA
WHERE ACCESS_DATE IS NOT NULL
GROUP BY DEPARTMENT, CATEGORY, DATE_TRUNC('day', ACCESS_DATE), ACCESS_HOUR;

CREATE OR REPLACE VIEW HOURLY_TRAFFIC_PATTERNS AS
SELECT 
    ACCESS_HOUR,
    DEPARTMENT,
    COUNT(*) AS TOTAL_VISITS,
    COUNT(DISTINCT IP_ADDRESS) AS UNIQUE_VISITORS,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (), 2) AS PERCENTAGE_OF_TRAFFIC
FROM ACCESS_LOGS_DATA
WHERE ACCESS_DATE IS NOT NULL
GROUP BY ACCESS_HOUR, DEPARTMENT
ORDER BY ACCESS_HOUR, DEPARTMENT;

-- Verification queries 
-- Checking record counts and datetime columns 
SELECT 'Supply Chain Data' as TABLE_NAME, 
       COUNT(*) as TOTAL_RECORDS,
       COUNT(CASE WHEN ORDER_DATE IS NOT NULL THEN 1 END) as NON_NULL_ORDER_DATES,
       COUNT(CASE WHEN SHIPPING_DATE IS NOT NULL THEN 1 END) as NON_NULL_SHIPPING_DATES,
       MIN(ORDER_DATE) as MIN_ORDER_DATE,
       MAX(ORDER_DATE) as MAX_ORDER_DATE
FROM SUPPLY_CHAIN_DATA
UNION ALL
SELECT 'Access Logs Data',
       COUNT(*),
       COUNT(CASE WHEN ACCESS_DATE IS NOT NULL THEN 1 END),
       0,
       MIN(ACCESS_DATE),
       MAX(ACCESS_DATE)
FROM ACCESS_LOGS_DATA;

SELECT 'Supply Chain Sample' as INFO, * FROM SUPPLY_CHAIN_DATA LIMIT 5;
SELECT 'Access Logs Sample' as INFO, * FROM ACCESS_LOGS_DATA LIMIT 5;

